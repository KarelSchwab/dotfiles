---
- name: Install nvm dependencies
  become: true
  ansible.builtin.package:
    pkg:
      - git
      - curl
    state: latest
  tags: [node]

- name: Download latest nvm version JSON"
  ansible.builtin.uri:
    url: https://api.github.com/repos/nvm-sh/nvm/releases/latest
  register: node_nvm_latest_version_json
  changed_when: false
  tags: [node]

- name: Registering nvm latest release
  ansible.builtin.set_fact:
    node_nvm_latest_release: "{{ node_nvm_latest_version_json.json.tag_name }}"
  tags: [node]

- name: Registering nvm latest version
  ansible.builtin.set_fact:
    node_nvm_latest_version: "{{ node_nvm_latest_release.stdout | default('') }}"
  tags: [node]

- name: Install nvm
  ansible.builtin.shell: >
    set -o pipefail && PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ node_nvm_latest_release }}/install.sh | bash'
  args:
    creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
    executable: /bin/bash
  tags: [node]

- name: Check if .bashrc exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.bashrc"
  register: node_bashrc
  tags: [node]

- name: Ensure .bashrc contains nvm stuff
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    create: true
    marker: "# {mark} ANSIBLE: nvm"
    insertafter: EOF
    block: |
      export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  when: node_bashrc.stat.exists
  tags: [node]
