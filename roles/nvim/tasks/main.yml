---
- name: Install nvim packages
  become: true
  ansible.builtin.apt:
    pkg:
      - git
      - ripgrep
      - fzf
      - gcc
      - cmake
      - curl
      - unzip
    state: latest
  tags:
    - nvim

- name: Create local bin directory if it does not exist
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/bin"
    state: directory
    mode: "0755"
  tags:
    - nvim

- name: Remove existing Neovim appimage
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/bin/nvim.appimage"
    state: absent
  tags:
    - nvim

- name: Remove existing extracted Neovim appimage
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/bin/squashfs-root"
    state: absent
  tags:
    - nvim

- name: Download nvim appimage
  ansible.builtin.get_url:
    url: https://github.com/neovim/neovim/releases/download/v0.11.1/nvim-linux-x86_64.appimage
    dest: "{{ ansible_env.HOME }}/.local/bin"
    mode: '0755'
  tags:
    - nvim

- name: Extract Neovim AppImage
  ansible.builtin.command:
    cmd: "./nvim-linux-x86_64.appimage --appimage-extract"
    chdir: "{{ ansible_env.HOME }}/.local/bin"
  args:
    creates: "{{ ansible_env.HOME }}/.local/bin/squashfs-root"
  tags:
    - nvim

- name: Create nvim symlink
  ansible.builtin.file:
    src: "{{ ansible_env.HOME }}/.local/bin/squashfs-root/usr/bin/nvim"
    dest: "{{ ansible_env.HOME }}/.local/bin/nvim"
    state: link
  tags:
    - nvim

- name: Check if nvim config exists
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.config/nvim"
  register: nvim
  tags:
    - nvim

- name: Clone nvim configuration if it does not exist
  ansible.builtin.git:
    repo: https://github.com/KarelSchwab/nvim
    dest: "{{ ansible_env.HOME }}/.config/nvim"
  when: not nvim.stat.exists
  tags:
    - nvim

- name: Cleanup Neovim appimage
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/bin/nvim.appimage"
    state: absent
  tags:
    - nvim

